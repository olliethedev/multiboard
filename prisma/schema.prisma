//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id            String       @id()
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  assignedTasks Task[]       @relation("AssignedTasks")
  ownedBoards   Board[]      @relation("BoardOwner")
  userBoards    Board[]      @relation("UserBoards")

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id()
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id()
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id()
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id()
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  boards      Board[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id()
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id()
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Board {
  id             String        @id() @default(cuid())
  name           String
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  owner          User          @relation("BoardOwner", fields: [ownerId], references: [id])
  ownerId        String
  columns        Column[]      @relation("BoardColumns")
  users          User[]        @relation("UserBoards")

  @@map("board")
}

model Column {
  id      String @id() @default(cuid())
  title   String
  order   Int
  board   Board  @relation("BoardColumns", fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  tasks   Task[] @relation("ColumnTasks")

  @@map("column")
}

model Task {
  id          String    @id() @default(cuid())
  title       String
  description String?
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  order       Int
  column      Column    @relation("ColumnTasks", fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  completedAt DateTime?
  isArchived  Boolean   @default(false)

  @@map("task")
}
